#+TITLE: Sean Miller’s Emacs Configuration
#+STARTUP: showall

* Emacs Config

** Defaults

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/tangled-settings.el
    ;; -- disable stuff ----------------------------------------------------------
    (setq make-backup-files nil)
    (setq auto-save-default nil)
    (setq inhibit-startup-message t)
    (fset 'yes-or-no-p 'y-or-n-p)
    (menu-bar-mode -1)

    ;; -- rows and columns -------------------------------------------------------
    (setq line-number-mode t)
    (setq column-number-mode t)
    (setq linum-format "%4d ")
    (setq-default fill-column 80)

    ;; -- windmove ---------------------------------------------------------------
    (define-key input-decode-map "\e[1;2A" [S-up])
    (windmove-default-keybindings)
    (setq windmove-wrap-around t)

    (require 'projectile)
    (setq projectile-keymap-prefix (kbd "C-c p"))
    (projectile-global-mode)
    (setq projectile-completion-system 'default)
    ;; -- avoid ruby deep indent -------------------------------------------------
    (setq ruby-deep-indent-paren nil)

    ;; -- delete trailing whitespace ---------------------------------------------
    (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Mode hooks

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/tangled-settings.el
    (typo-global-mode 1)

    (global-set-key (kbd "C-c 8 c") 'typo-change-language)

    (defun my-text-mode-hook ()
      (typo-mode)
      (typo-change-language "English")
      (linum-mode -1)
      (auto-fill-mode 1)
      (nanowrimo-mode -1)
      (set-input-method "TeX")
      (setq line-spacing 5)
      (set-frame-font "Georgia 16")
      (set-face-font 'org-level-4 "Georgia 16")
      (set-face-foreground 'org-level-4 "black")
      (set-face-font 'org-level-3 "Georgia 18")
      (set-face-foreground 'org-level-3 "black")
      (set-face-font 'org-level-2 "Georgia 20")
      (set-face-foreground 'org-level-2 "black")
      (set-face-font 'org-level-1 "Georgia 22")
      (set-face-foreground 'org-level-1 "black")
      (define-key org-mode-map (kbd "M-s M-q") 'my/begin-end-quote)
      (define-key org-mode-map (kbd "M-s M-v") 'my/begin-end-verse)
      (define-key org-mode-map (kbd "M-s M-x") 'my/begin-end-example)
      (define-key org-mode-map (kbd "M-s M-e") 'my/begin-end-src-emacs-lisp)
      (define-key org-mode-map (kbd "M-s M-r") 'my/begin-end-src-ruby)
      (org-bullets-mode 1)
    )

    (add-hook 'text-mode-hook 'my-text-mode-hook)

    (defun my-code-mode-hook ()
      (linum-mode)
      (setq line-spacing nil)
      (typo-mode -1))

    (add-to-list 'auto-mode-alist '("\\.rb$" . enh-ruby-mode))
    (add-to-list 'interpreter-mode-alist '("ruby" . enh-ruby-mode))

    (add-hook 'enh-ruby-mode-hook 'my-code-mode-hook)
    (add-hook 'enh-ruby-mode-hook
      (lambda () (rvm-activate-corresponding-ruby)))
    (add-hook 'enh-ruby-mode-hook 'rubocop-mode)

    (add-hook 'feature-mode-hook 'my-code-mode-hook)
    (add-hook 'feature-mode-hook
      (lambda () (rvm-activate-corresponding-ruby)))

    (require 'js2-refactor)
    (add-hook 'js-mode-hook 'my-code-mode-hook)
    (add-hook 'js-mode-hook
      (lambda () (js2-mode)))

    (add-hook 'emacs-lisp-mode-hook 'my-code-mode-hook)

    (require 'projectile-rails)
    (add-hook 'projectile-mode-hook 'projectile-rails-on)

    (require 'overseer)
    (add-hook 'emacs-lisp-mode-hook 'overseer-mode-hook)
#+END_SRC

** Global key bindings

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/tangled-settings.el
    (global-set-key (kbd "C-c f") 'projectile-find-file)
    (global-set-key (kbd "C-c h") 'helm-projectile)

    (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)

    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

    (global-set-key (kbd "C-c SPC") 'ace-jump-mode)
    (global-set-key (kbd "C-x o") 'ace-window)
    (global-set-key (kbd "C-x a e") "ǣ")

    (global-set-key
      (kbd "C-x t")
      (defhydra old-english-abbreviations (:color blue)
        "old-english-abbreviations"
        ("s" (my-insert-swa) "swā")
        ("t o" (my-insert-to) "tō")
        ("t s" (my-insert-thaes) "þæs")
        ("t t" (my-insert-thaet) "þæt")
        ("w s" (my-insert-waes) "wæs")))

    (defun my-insert-swa ()
      "Insert swā"
      (interactive)
      (insert "swā"))

    (defun my-insert-to ()
      "Insert tō"
      (interactive)
      (insert "tō"))

    (defun my-insert-thaes ()
      "Insert þæs"
      (interactive)
      (insert "þæs"))

    (defun my-insert-thaet ()
      "Insert þæt"
      (interactive)
      (insert "þæt"))

    (defun my-insert-waes ()
      "Insert wæs"
      (interactive)
      (insert "wæs"))

    ;; http://whattheemacsd.com/key-bindings.el-03.html

    (global-set-key (kbd "M-j")
      (lambda ()
	(interactive)
	(join-line -1)))

    ;;

    (global-set-key (kbd "C-c r g q")
      (lambda ()
	(interactive)
	(find-file "db/structure.sql")))

    ;; Because S-<up> is already mapped in org-mode
    (global-set-key (kbd "C-x RET <right>") 'windmove-right)
    (global-set-key (kbd "C-x RET <left>") 'windmove-left)
    (global-set-key (kbd "C-x RET <up>") 'windmove-up)
    (global-set-key (kbd "C-x RET <down>") 'windmove-down)

    ;; Because M–i is tab-to-tab-stop in org-mode
    (global-set-key (kbd "M-s i") 'imenu)
#+END_SRC

** Emacs server and Emacsclient

Setting up server for emacsclient, following
- http://devblog.avdi.org/2010/04/23/daemonic-emacs/
- http://devblog.avdi.org/2011/10/27/running-emacs-as-a-server-emacs-reboot-15/

To use it: create and chmod +x /usr/local/bin/ec

#+BEGIN_SRC bash :tangle no
    #!/bin/sh
    exec /usr/bin/env emacsclient -c -a '' $*
#+END_SRC

and add export EDITOR=ec to ~/.zshrc

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/tangled-settings.el
    (server-start)
#+END_SRC

** Dired

Sets Dired Omit Mode to omit “uninteresting” files (default ., .., autosave files)

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/tangled-settings.el
    (require 'dired-x)
    (setq-default dired-omit-files-p t)
#+END_SRC

Maked Dired less verbose, following: http://whattheemacsd.com/setup-dired.el-01.html

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/tangled-settings.el
    (require 'dired-details)
    (setq-default dired-details-hidden-string "--- ")
    (dired-details-install)
#+END_SRC

Get M-< and M-> to play nice in Dired (first file and last file, not top and
bottom), following:  http://whattheemacsd.com/setup-dired.el-02.html

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/tangled-settings.el
    (defun dired-back-to-top ()
      (interactive)
      (beginning-of-buffer)
      (dired-next-line (if dired-omit-mode 1 4)))

    (define-key dired-mode-map
      (vector 'remap 'beginning-of-buffer) 'dired-back-to-top)

    (defun dired-jump-to-bottom ()
      (interactive)
      (end-of-buffer)
      (dired-next-line -1))

    (define-key dired-mode-map
      (vector 'remap 'end-of-buffer) 'dired-jump-to-bottom)
#+END_SRC

** Ruby and RSpec

RSpec Mode

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/tangled-settings.el
    (require 'rspec-mode)

    (setq rspec-use-rvm t)
    (setq rspec-use-rake-when-possible nil)
    (setq rspec-use-zeus-when-possible t)

    (defadvice rspec-compile (around rspec-compile-around)
      "Use BASH shell for running the specs because of ZSH issues."
      (let ((shell-file-name "/bin/bash"))
	ad-do-it))
    (ad-activate 'rspec-compile)

    (eval-after-load 'rspec-mode
      '(rspec-install-snippets))
#+END_SRC

Ruby Tools Mode, including senny-ruby-interpolate from
http://blog.senny.ch/blog/2012/10/06/emacs-tidbits-for-ruby-developers/

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/tangled-settings.el
    (require 'ruby-tools)

    (global-set-key
      (kbd "C-c q")
      (defhydra hydra-ruby-tools-quote (:color blue)
        "ruby-tools-quote"
        (":" (ruby-tools-to-symbol) "to symbol")
        ("s" (ruby-tools-to-single-quote-string) "to single-quoted string")
        ("d" (ruby-tools-to-double-quote-string) "to double-quoted string")))

    (defun senny-ruby-interpolate ()
      "In a double quoted string, interpolate."
      (interactive)
      (insert "#")
      (when (and
	     (looking-back "\".*")
	     (looking-at ".*\""))
	(insert "{}")
	(backward-char 1)))

    (eval-after-load 'enh-ruby-mode
      '(progn
	 (define-key enh-ruby-mode-map (kbd "#") 'senny-ruby-interpolate)))
#+END_SRC

Flymake Ruby

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/tangled-settings.el
    (require 'flymake-ruby)
    (add-hook 'enh-ruby-mode-hook 'flymake-ruby-load)
#+END_SRC

Robe

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/tangled-settings.el
    (require 'robe)
    (add-hook 'enh-ruby-mode-hook 'robe-mode)

    (defadvice inf-ruby-console-auto (before activate-rvm-for-robe activate)
      (rvm-activate-corresponding-ruby))

    (package-initialize)
    (global-company-mode)
    (push 'company-robe company-backends)
#+END_SRC

** Org Mode

Publish ~/Dropbox/gesta org to ~/Dropbox/gesta_html

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/tangled-settings.el
    (setq org-export-with-sub-superscripts nil)

    (global-set-key (kbd "C-c C-g C-p")
		    (lambda ()
		      (interactive)
		      (org-publish-project "org")))

    (require 'ox-publish)
    (setq org-publish-project-alist
	  '(
	    ("org"
	     :base-directory "~/Dropbox/gesta/"
	     :base-extension "org"
	     :publishing-directory "~/Dropbox/gesta_html/"
	     :recursive t
	     :publishing-function org-html-publish-to-html
	     :headline-levels 4             ; Just the default for this project.
	     :auto-preamble t
	     )
	    ))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/tangled-settings.el
    (org-babel-do-load-languages
     'org-babel-load-languages
      '( (ruby . t)
	 (emacs-lisp . t)
       ))

    (defun cid (custom-id)
      (interactive "MCUSTOM_ID: ")
      (org-set-property "CUSTOM_ID" custom-id))

    (setq org-default-notes-file "~/Dropbox/gesta/notes.org")
    (define-key global-map "\C-cc" 'org-capture)
    (setq org-capture-templates
      '(
        ("c" "culture-link-note" plain
          (function my/next-in-gesta)
          "**** %<%H:%M>. %^{prompt} :culture:links:\n\n%?"
          :empty-lines 1
        )
        ("e" "emacs-note" plain
          (function my/next-in-gesta)
          "**** %<%H:%M>. %^{prompt} :emacs:\n\n%?"
          :empty-lines 1
        )
        ("f" "fiction-note" plain
          (function my/next-in-gesta)
          "**** %<%H:%M>. %^{prompt} :fiction:\n\n%?"
          :empty-lines 1
        )
        ("l" "labwork-note" plain
          (function my/next-in-gesta)
          "**** %<%H:%M>. %^{prompt} :labwork:\n\n%?"
          :empty-lines 1
        )
        ("m" "morning-note" plain
          (function my/next-in-gesta)
          "**** %<%H:%M>. Morning :morning:\n\n%?"
          :empty-lines 1
        )
        ("t" "tech-link-note" plain
          (function my/next-in-gesta)
          "**** %<%H:%M>. %^{prompt} :tech:links:\n\n%?"
          :empty-lines 1
        )
        ("u" "untagged-note" plain
          (function my/next-in-gesta)
          "**** %<%H:%M>. %^{prompt}\n\n%?"
          :empty-lines 1
        )
        ("v" "verdour-note" plain
          (function my/next-in-gesta)
          "**** %<%H:%M>. %^{prompt} :verdour:\n\n%?"
          :empty-lines 1
        )
      )
    )

    (defun my/next-in-gesta ()
      (find-file "~/Dropbox/gesta/2016.org")
      (my/find-or-create-date-headers (format-time-string "%Y-%m-%d 09:00"))
      (org-end-of-subtree)
    )

    (defun my-org-capture-mode-hook ()
      (nanowrimo-mode 1)
    )
    (add-hook 'org-capture-mode-hook 'my-org-capture-mode-hook)

    (define-key global-map "\C-ca" 'org-agenda)
#+END_SRC

-----

** my/begin-end custom functions

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/tangled-code.el
    (defun my/begin-end-quote ()
      (interactive)
      (my/begin-end "quote" "quote"))

    (defun my/begin-end-verse ()
      (interactive)
      (my/begin-end "verse" "verse"))

    (defun my/begin-end-example ()
      (interactive)
      (my/begin-end "example" "example"))

    (defun my/begin-end-src-emacs-lisp ()
      (interactive)
      (my/begin-end "src emacs-lisp" "src"))

    (defun my/begin-end-src-ruby ()
      (interactive)
      (my/begin-end "src ruby" "src"))

    (defun my/begin-end (begin-tag end-tag)
      (interactive)
      (let ((cited-string "\n"))
	(when (use-region-p)
	  (setq cited-string
		(my/remove-old-citation-formatting (buffer-substring-no-properties (region-beginning) (region-end))))
	  (delete-region (region-beginning) (region-end)))
	(insert "#+begin_" begin-tag "\n"
		cited-string
		"#+end_" end-tag "\n"))
	(unless (use-region-p)
	  (forward-line -2)))

    (defun my/remove-old-citation-formatting (str)
      (interactive)
      (if (string= (substring str 0 2) "> ")
	  (replace-regexp-in-string "^> " "    "
				    (replace-regexp-in-string "\s*<br/>" ""
							      (replace-regexp-in-string "    $" ""
								(replace-regexp-in-string "\n" "\n    " str))))
	str))
#+END_SRC

** TODO latexify

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/tangled-code.el
    (defun my/latexify ()
      (interactive)
      (let ((cited-string "\n"))
	(when (use-region-p)
	  (setq cited-string
		(my/inner-latexify (buffer-substring-no-properties (region-beginning) (region-end))))
	  (delete-region (region-beginning) (region-end)))
	(insert "%!TEX TS-program = xelatex\n"
                     "%!TEX encoding = UTF-8 Unicode\n"
                     "\\documentclass[fontsize=16pt,oneside]{scrbook}\n"
                     "\\usepackage{verse}\n"
                     "\\usepackage{fontspec,xltxtra,xunicode}\n"
                     "\\usepackage[left,modulo]{lineno}\n"
                     "\\defaultfontfeatures{Mapping=tex-text}\n"
                     "\\linespread{1.5}\n"
                     "\\begin{document}\n"
                     "\\begin{verse}\n"
                     "\\begin{linenumbers}\n"
                     cited-string
                     "\\end{linenumbers}\n"
                     "\\end{verse}\n"
                     "\\end{document}\n")))

    (defun my/inner-latexify (str)
      (interactive)
      (replace-regexp-in-string (regexp-quote "[(.*)]\((.*)\)") "\1=\2="
      (replace-regexp-in-string (regexp-quote "\\\\\n\\\\\n") (regexp-quote "\n\n")
      (replace-regexp-in-string "\n" (regexp-quote "\\\\\n")
      (replace-regexp-in-string "\n\n" (regexp-quote "\\\\!\n\n") str)))))
#+END_SRC


** org2blog to WordPress

Taking the org2blog instructions from
http://vxlabs.com/2014/05/25/emacs-24-with-prelude-org2blog-and-wordpress/

but following the org2blog README and using auth-source instead of netrc:
https://github.com/punchagan/org2blog/commit/52be89507c337e5f74be831ca563a8023e0ec736

Expects an ~/.authinfo file of the form:
machine {my-machine-name} login {my-elogin} password {my-password}

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/tangled-settings.el
    (setq org-directory "~/Dropbox/gesta/twc/")
    ;; and you need this, else you'll get symbol void errors when doing
    ;; fill paragraph
    (setq org-list-allow-alphabetical t)

    (require 'org2blog-autoloads)
    (require 'auth-source)
    (let (credentials)
	    (add-to-list 'auth-sources "~/.authinfo")
	    (setq credentials (auth-source-user-and-password "thewanderingcoder"))
	    (setq org2blog/wp-blog-alist
		  `(("twc"
		     :url "http://thewanderingcoder.com/xmlrpc.php"
		     :username ,(car credentials)
		     :password ,(cadr credentials)
		     :default-title "Hello World"
		     :default-categories ("org2blog" "emacs")
		     :tags-as-categories nil))))

    ;; http://blog.binchen.org/posts/how-to-use-org2blog-effectively-as-a-programmer.html
    ;; has half the instructions, but was missing
    ;; `wp-use-sourcecode-shortcode` at the time of this writing, without
    ;; which this does not work at all.

    ;; * `M-x package-install RET htmlize` is required, else you get empty
    ;;   code blocks https://github.com/punchagan/org2blog/blob/master/org2blog.el
    ;; * with wp-use-sourcecode-shortcode set to 't, org2blog will use 1
    ;;   shortcodes, and hence the SyntaxHighlighter Evolved plugin on your blog.
    ;;   however, if you set this to nil, native Emacs highlighting will be used,
    ;;   implemented as HTML styling. Your pick!
    (setq org2blog/wp-use-sourcecode-shortcode 't)
    ;; removed light="true"
    (setq org2blog/wp-sourcecode-default-params nil)
    ;; target language needs to be in here
    (setq org2blog/wp-sourcecode-langs
	  '("actionscript3" "bash" "coldfusion" "cpp" "csharp" "css" "delphi"
	    "erlang" "fsharp" "diff" "groovy" "javascript" "java" "javafx" "matlab"
	    "objc" "perl" "php" "text" "powershell" "python" "ruby" "scala" "sql"
	    "vb" "xml"
	    "sh" "emacs-lisp" "lisp" "lua"))

    ;; this will use emacs syntax higlighting in your #+BEGIN_SRC
    ;; <language> <your-code> #+END_SRC code blocks.
    (setq org-src-fontify-natively t)
#+END_SRC

** org-mode key bindings

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/tangled-settings.el
    (define-key org-mode-map (kbd "C-c b d") 'org2blog/wp-post-buffer)
    (define-key org-mode-map (kbd "C-c b p") 'org2blog/wp-post-buffer-and-publish)
    (define-key org-mode-map (kbd "C-c t") 'org-set-tags)
#+END_SRC

** pbcopy

Enable pbcopy, so kill-ring can interact with Mac OS X clipboard:
https://github.com/vmalloc/emacs/blob/master/custom/pbcopy.el

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/tangled-settings.el
    (require 'pbcopy)
    (turn-on-pbcopy)
#+END_SRC

** yasnippet

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/tangled-settings.el
    (require 'yasnippet)
    (yas-global-mode 1)
#+END_SRC
** Run org-babel-tangle on saving sean.org

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/tangled-settings.el
    (defun my/tangle-on-save-emacs-config-org-file()
      (when (string= buffer-file-name (file-truename "~/.emacs.d/sean.org"))
	(org-babel-tangle)))

    (add-hook 'after-save-hook 'my/tangle-on-save-emacs-config-org-file)
#+END_SRC

** Helm

#+begin_src emacs-lisp :tangle ~/.emacs.d/tangled-settings.el
    (require 'helm)
    (helm-mode)
    (require 'helm-projectile)
#+end_src

** Theme

#+begin_src emacs-lisp :tangle ~/.emacs.d/tangled-settings.el
    (defun theme-init ()
      (load-theme 'solarized-light t)
    )

    (add-hook 'after-init-hook 'theme-init)
#+end_src

** Bookmark+

#+begin_src emacs-lisp :tangle ~/.emacs.d/tangled-settings.el
    (require 'bookmark+)
#+end_src

** 'my/note and 'my/event

http://thewanderingcoder.com/2015/03/automating-boilerplate-in-org-mode-journalling/

#+begin_src emacs-lisp :tangle ~/.emacs.d/tangled-settings.el
    (defun my/note (title tags)
      (interactive (list
                     (read-from-minibuffer "Title? ")
                     (read-from-minibuffer "Tags? ")))
      (my/find-or-create-date-headers (format-time-string "%Y-%m-%d 09:00"))
      (org-end-of-subtree)
      (insert "\n\n**** " (format-time-string "%H:%M") ". " title)
      (unless (string= tags "")
        (insert "  :" tags ":")
      )
      (insert "\n" (format-time-string "[%Y-%m-%d %H:%M]") "\n\n"))

    (defun my/event (date end-time)
      (interactive (list
                     (org-read-date)
                     (read-from-minibuffer "end time (e.g. 22:00)? ")))
      (if (eq 1 (length (split-string date)))
        (setq date (concat date " 09:00"))
      )
      (my/find-or-create-date-headers date)
      (goto-char (line-end-position))
      (setq start-time (nth 1 (split-string date)))
      (if (string= start-time nil)
        (setq start-time ""))
      (insert "\n\n**** " start-time ". ")
      (save-excursion
	(if (string= end-time "")
	  (setq timestamp-string date)
	(setq timestamp-string (concat date "-" end-time)))
	(insert "\n<" timestamp-string ">\n\n")))


    (defun my/find-or-create-date-headers (date)
      (setq date-name (format-time-string "%A %-e %B %Y" (date-to-time date)))
      (beginning-of-buffer)
      (setq found (re-search-forward (concat "^\*\*\* " date-name) nil t))
      (if found
          (goto-char (point))
        (my/create-date-headers date)
      )
    )

    (defun my/create-date-headers (date)
      (beginning-of-buffer)
      (setq month-name (format-time-string "%B" (date-to-time date)))
      (setq found (re-search-forward (concat "^\*\* " month-name) nil t))
      (unless found
        (my/create-header-for-month date)
      )
      (my/create-header-for-day date)
    )

    (defun my/create-header-for-month (date)
      (setq added-month nil)
      (setq month (nth 4 (org-parse-time-string date)))
      (setq added-month-name (calendar-month-name month))
      (if (= month 1)
          (my/insert-month-header added-month-name)
      )
      (while (and (not added-month) (> month 1))
        (setq month (1- month))
        (setq month-name (calendar-month-name month))
        (setq found (re-search-forward (concat "^\*\* " month-name) nil t))
        (when found
          (goto-char (point))
          (my/insert-month-header added-month-name)
        )
      )
      (unless added-month
          (my/insert-month-header added-month-name)
      )
    )

    (defun my/insert-month-header (month-name)
      (org-end-of-subtree)
      (insert "\n\n** " month-name)
      (setq added-month t)
    )

    (defun my/create-header-for-day (date)
      (my/go-to-month date)

      (setq header-to-add (format-time-string "%A %-e %B %Y" (date-to-time date)))

      (setq date-list (org-parse-time-string date))
      (setq day (nth 3 date-list))
      (setq month (nth 4 date-list))
      (setq year (nth 5 date-list))
      (setq added-day nil)

      (while (and (not added-day) (> day 1))
        (setq day (1- day))
        (setq day-name (format-time-string "%A %-e %B %Y" (encode-time 0 0 0 day month year)))
        (setq found (re-search-forward (concat "^\*\*\* " day-name) nil t))
        (when found
          (goto-char (point))
          (org-end-of-subtree)
          (insert "\n\n*** " header-to-add)
          (setq added-day t)
        )
      )
      (unless added-day
        (insert "\n\n*** " header-to-add)
      )
    )

    (defun my/go-to-month (date)
      (setq month-name (format-time-string "%B" (date-to-time date)))
      (setq found (re-search-forward (concat "^\*\* " month-name) nil t))
      (when found
        (goto-char (point))
      )
    )
#+end_src

** Hydras

Jump to directories

#+begin_src emacs-lisp :tangle ~/.emacs.d/tangled-settings.el
    (require 'hydra)
    (global-set-key
      (kbd "C-c j")
      (defhydra hydra-jump (:color blue)
        "jump"
        ("e" (find-file "~/.emacs.d/sean.org") ".emacs.d")
        ("c" (find-file "~/.emacs.d/Cask") "Cask")

        ("oi" (find-file "~/code/inventory/") "invent")
        ("oo" (find-file "~/code/optics/") "optics")

        ("a" (find-file "~/code/autrui/") "autrui")
        ("h" (find-file "~/Dropbox/gesta/2016.org") "hodie")
        ("r" (find-file "~/Dropbox/gesta/readings.org") "readings")
        ("w" (find-file "~/Dropbox/gesta/writings.org") "writings")
        ("t" (find-file "~/Dropbox/gesta/twc/") "twc")
        ("v" (find-file "~/Dropbox/gesta/verdour.org") "verdour")))

#+end_src

Switch modes.  (Because org-babel-tangle interacts with emacs-lisp mode)

#+begin_src emacs-lisp :tangle ~/.emacs.d/tangled-settings.el
    (global-set-key
      (kbd "C-c m")
      (defhydra hydra-mode-switch (:color blue)
        "mode-switch"
        ("e" (emacs-lisp-mode) "emacs-lisp")
        ("l" (linum-mode) "linum")
        ("o" (org-mode) "org")
        ("p" (paredit-mode) "paredit")
        ("t" (typo-mode) "typo")
        ("g" (my/margins) "margins")))
#+end_src

Ace jumps

#+begin_src emacs-lisp :tangle ~/.emacs.d/tangled-settings.el
    (global-set-key
      (kbd "C-c e")
      (defhydra hydra-ace-jump (:color blue)
        "ace-jump"
        ("c" (ace-jump-mode) "char")
        ("l" (ace-jump-line-mode) "line")
        ("w" (ace-jump-word-mode) "word")))
#+end_src

** guide-key, all the time

#+begin_src emacs-lisp :tangle ~/.emacs.d/tangled-settings.el
    (require 'guide-key)
    (setq guide-key/guide-key-sequence t)
    (guide-key-mode 1)
#+end_src

** helm-ag key binding

#+begin_src emacs-lisp :tangle ~/.emacs.d/tangled-settings.el
  (global-set-key (kbd "C-c s") 'helm-ag-project-root)
#+end_src

** neotree-toggle key binding

#+begin_src emacs-lisp :tangle ~/.emacs.d/tangled-settings.el
  (global-set-key [f8] 'neotree-toggle)
#+end_src

** javascript / coffeescript indent 2 spaces

#+begin_src emacs-lisp :tangle ~/.emacs.d/tangled-settings.el
  (custom-set-variables '(coffee-tab-width 2))
  (setq-default js2-basic-offset 2)
#+end_src

** github-flavored-markdown

#+begin_src emacs-lisp :tangle ~/.emacs.d/tangled-settings.el
  (setq markdown-command "~/.emacs.d/flavor.rb")
#+end_src

** margins

#+begin_src emacs-lisp :tangle ~/.emacs.d/tangled-settings.el
 (setq-default left-margin-width 4 right-margin-width 1)
 (set-window-buffer nil (current-buffer))

  (defun my/margins ()
    "set default margins 4 / 1"
    (interactive)
    (setq-default left-margin-width 4 right-margin-width 1)
    (set-window-buffer nil (current-buffer))
  )
#+end_src

** howardisms
 http://www.howardism.org/Technical/Emacs/orgmode-wordprocessor.html

#+begin_src emacs-lisp :tangle ~/.emacs.d/tangled-settings.el
      (setq org-hide-emphasis-markers t)

      (font-lock-add-keywords 'org-mode
      '(("^ +\\([-*]\\) "
      (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

      (require 'org-bullets)
#+end_src
